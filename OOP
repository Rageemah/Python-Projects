class Person:
    def __init__(self, name, age, ID):
        self.name = name
        self.age = age
        self.ID = ID
    
    def __str__(self):
        return f"{self.__class__.__name__}: {self.name} (ID: {self.ID}, Age: {self.age})"

class Student(Person):
    def __init__(self, name, age, ID, major):
        super().__init__(name, age, ID)
        self.major = major
        self.enrolled_courses = []
    
    def enroll(self, course):
        if len(course.enrolled_students) < course.max_capacity:
            self.enrolled_courses.append(course)
            course.add_student(self)
            print(f"{self.name} successfully enrolled in {course.name}.")
        else:
            print(f"Sorry {self.name}, {course.name} is already full!")
    
    def drop(self, course):
        if course in self.enrolled_courses:
            self.enrolled_courses.remove(course)
            course.remove_student(self)
            print(f"{self.name} has dropped {course.name}.")
        else:
            print(f"{self.name} is not enrolled in {course.name}.")
    
    def __str__(self):
        courses = [c.name for c in self.enrolled_courses] if self.enrolled_courses else ['None']
        return super().__str__() + f", Major: {self.major}, Enrolled Courses: {courses}"

class Professor(Person):
    def __init__(self, name, age, ID, department):
        super().__init__(name, age, ID)
        self.department = department
        self.courses_teaching = []
    
    def assign_course(self, course):
        self.courses_teaching.append(course)
        course.professor = self
        print(f"{self.name} is now teaching {course.name}.")
    
    def __str__(self):
        courses = [c.name for c in self.courses_teaching] if self.courses_teaching else ['None']
        return super().__str__() + f", Department: {self.department}, Courses Teaching: {courses}"

class Course:
    def __init__(self, course_code, name, max_capacity):
        self.course_code = course_code
        self.name = name
        self.max_capacity = max_capacity
        self.professor = None
        self.enrolled_students = []
    
    def add_student(self, student):
        if len(self.enrolled_students) < self.max_capacity:
            self.enrolled_students.append(student)
        else:
            print(f"Cannot add {student.name}, course {self.name} is full.")
    
    def remove_student(self, student):
        if student in self.enrolled_students:
            self.enrolled_students.remove(student)
    
    def __str__(self):
        students = [s.name for s in self.enrolled_students] if self.enrolled_students else ['None']
        professor = self.professor.name if self.professor else 'None'
        return f"Course: {self.name} (Code: {self.course_code}, Professor: {professor}, Students: {students})"


class University:
    def __init__(self, name):
        self.name = name
        self.courses = []
        self.students = []
        self.professors = []
    
    def add_course(self, course):
        self.courses.append(course)
        print(f"Course {course.name} has been added to {self.name}.")
    
    def add_student(self, student):
        self.students.append(student)
        print(f"Student {student.name} has joined {self.name}.")
    
    def add_professor(self, professor):
        self.professors.append(professor)
        print(f"Professor {professor.name} is now part of {self.name}.")
    
    def get_course(self, course_code):
        for course in self.courses:
            if course.course_code == course_code:
                return course
        print(f"Course with code {course_code} not found.")
        return None
    
    def __str__(self):
        courses = [str(c) for c in self.courses] if self.courses else ['No courses available']
        students = [str(s) for s in self.students] if self.students else ['No students enrolled']
        professors = [str(p) for p in self.professors] if self.professors else ['No professors assigned']
        return f"University: {self.name}\nCourses:\n{courses}\n\nStudents:\n{students}\n\nProfessors:\n{professors}"

uni = University("Tech University")
    
course1 = Course("PR101", "Programming Fundamentals", 2)
course2 = Course("MATH201", "Calculus I", 3)
uni.add_course(course1)
uni.add_course(course2)

student1 = Student("Alice", 20, "S001", "Programming")
student2 = Student("Bob", 22, "S002", "Math")
student3 = Student("Charlie", 21, "S003", "Web-Tech")
uni.add_student(student1)
uni.add_student(student2)
uni.add_student(student3)
    
prof1 = Professor("Dr. Smith", 45, "P001", "Programming")
uni.add_professor(prof1)
    
prof1.assign_course(course1)
    
student1.enroll(course1)
student2.enroll(course1)  
student3.enroll(course1)  
student3.enroll(course2)  
    
student2.drop(course1)
    
print(uni)
